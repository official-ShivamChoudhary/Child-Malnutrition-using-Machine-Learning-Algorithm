# -*- coding: utf-8 -*-
"""Child Malnutrition using Machine Learning Algorithm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F5_jYrocWkOqo-g2ODlMcmK4A7og0T1k
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

data = pd.read_csv(r'/content/Child malnutrition.csv')

data.head()

print(data.info()) 
print(data.describe())

data.shape

data = data.iloc[: , 0:12]

data.head()

# CHECKING HOW MANY NULL VALUES ARE THERE IN OUR DATASET .

data.isnull()

data.isnull().sum()

# GOING TO DROP ALL THE NULL VALUES .

data = data.dropna()

data.isnull().sum()

# CHECKING HOW MANY DUPLICATE VALUES ARE THERE IN OUR DATASET.

data.duplicated().sum()

# CHECKING HOW MANY ROWS ARE THERE IN THIS DATASET FOR ASIA .

data['Continent'].value_counts(ascending=False)

data['Continent'].value_counts().head().plot(kind='bar')

data['Continent'].value_counts().head().plot(kind='pie')

# EXTRACTING ONLY ASIA'S DATA FROM THE DATASET .

data[data['Continent'] == 'Asia']

data = data[data['Continent'] == 'Asia']

# THERE IS ONLY ASIA'S ENTITY.

data.sample(10)

data.shape

data['ISO code'].value_counts(ascending=False)

sns.countplot(x = 'Sex', hue = 'Status', data = data)
plt.legend(bbox_to_anchor=(1.04,1), loc="upper left")

sns.countplot(x = 'Sex', hue = 'World Bank', data = data)
plt.legend(bbox_to_anchor=(1.04,1), loc="upper left")

sns.pairplot(data ,  vars = ['Sex' ,'Age' ,'Height' ,'Weight' ,'Wasting' ,'Overweight' ,'Stunting','Underweight'] , hue = 'Status')

data.drop('Wasting', axis=1, inplace = True)
data.drop('Overweight', axis=1, inplace = True)
data.drop('Stunting', axis=1, inplace = True)
data.drop('Underweight', axis=1, inplace = True)

data.head()

# GENERATING A DUMMY DATASET OF WORLD BANK .

Income = pd.get_dummies(data['World Bank'], drop_first = True)

Income.head()

Preprocessed_Data = pd.concat([data, Income], axis = 1)

Preprocessed_Data.head()

Preprocessed_Data.drop('World Bank', axis=1, inplace = True)

# THIS IS THE PREPROCESSED DATA

Preprocessed_Data.head()

Preprocessed_Data.shape

# CONVERTING PREPROCESSED DATA TO CSV FILE .

print("*******Initializing Dumping Process********")

data_of_asia = pd.DataFrame({
    'Sex' : Preprocessed_Data['Sex'],
    'Age' : Preprocessed_Data['Age'],
    'Height' : Preprocessed_Data['Height'],
    'Weight' : Preprocessed_Data['Weight'],
    'Low Income' : Preprocessed_Data['Low Income'],
    'Lower Middle Income' : Preprocessed_Data['Lower Middle Income'],
    'Upper Middle Income' : Preprocessed_Data['Upper Middle Income'],
    'Status' : Preprocessed_Data['Status']
})
data_of_asia.to_csv("Data_of_asia.csv", index = False)
print("*******Dumping Process Finished!!**********")

data = pd.read_csv('Data_of_asia.csv')
data.head()

predictors = data.iloc[:, 0:7]
predictors.head()

predictors.shape

target = data.iloc[:, 7]
target.head()

target.shape

# Creating holders to store the model performance results
ML_Model = []
acc_train = []
acc_test = []
acc_score = []

#function to call for storing the results
def storeResults(model, a,b,c):
    ML_Model.append(model)
    acc_train.append(round(a, 3))
    acc_test.append(round(b, 3))
    acc_score.append(round(c, 3))

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(predictors, target, test_size = 0.2)

print(xtrain.shape)
print(xtest.shape)

# USING RAMDOM FOREST CLASSIFIER TO PREDICT MALNOURISHED CHILDREN .

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators = 300)
model.fit(xtrain, ytrain)

predict = model.predict(xtest)

predict

y_train_model = model.predict(xtrain)
y_test_model = model.predict(xtest)

# HERE WE ARE GOING TO PREDICT OUR ACCURACY SCORE .

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
rf_train_model = accuracy_score(ytrain,y_train_model)
rf_test_model = accuracy_score(ytest,y_test_model)
print("RandomForest: Accuracy on training Data: {:.3f}".format(rf_train_model))
print("RandomForest: Accuracy on test Data: {:.3f}".format(rf_test_model))
print("-------------------------------------------------------------------")
print(confusion_matrix(ytest, predict))
print(classification_report(ytest, predict))
print("-------------------------------------------------------------------")
acc_score_rf = accuracy_score(ytest,predict)*100
print("Accuracy of our model is -  " , accuracy_score(ytest,predict)*100,"%")

storeResults('RF', rf_train_model, rf_test_model , acc_score_rf)

# USING SUPPORT VECTOR MACHINE ALGORITHM TO PREDICT MALNOURISHED CHILDREN .

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(predictors, target, test_size = 0.3)

from sklearn.svm import SVC
model = SVC()

model.fit(xtrain, ytrain)

len(xtrain)

len(xtest)

predict = model.predict(xtest)

predict

y_train_model2 = model.predict(xtrain)
y_test_model2 = model.predict(xtest)

# HERE WE ARE GOING TO PREDICT OUR ACCURACY SCORE OF SVM .

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
svm_train_model = accuracy_score(ytrain,y_train_model2)
svm_test_model = accuracy_score(ytest,y_test_model2)
print("SupportVectorMachine: Accuracy on training Data: {:.3f}".format(svm_train_model))
print("SupportVectorMachine: Accuracy on test Data: {:.3f}".format(svm_test_model))
print("-------------------------------------------------------------------")
print(confusion_matrix(ytest, predict))
print(classification_report(ytest, predict))
print("-------------------------------------------------------------------")
acc_score_svm = accuracy_score(ytest,predict)*100
print("Accuracy of our model is -  " , accuracy_score(ytest,predict)*100,"%")

def print_confusion_matrix_svm(ytest, predict):
    cm = confusion_matrix(ytest, predict)
    print('True positive for SVM = ', cm[0][0])
    print('False positive for SVM = ', cm[0][1])
    print('False negative for SVM = ', cm[1][0])
    print('True negative for SVM = ', cm[1][1])

print_confusion_matrix_svm(ytest, predict)

storeResults('SVM', svm_train_model, svm_test_model , acc_score_svm)

# USING KNeighborsClassifier TO PREDICT MALNOURISHED CHILDREN .

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(predictors, target, test_size = 0.2)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors =3)
knn.fit(xtrain, ytrain)

predict = knn.predict(xtest)
predict

y_train_model4 = knn.predict(xtrain)
y_test_model4 = knn.predict(xtest)

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
y_train_knn = accuracy_score(ytrain,y_train_model4)
y_test_knn = accuracy_score(ytest,y_test_model4)
print("-------------------------------------------------------------------")
print("KNeighborsClassifier: Accuracy on training Data: {:.3f}".format(y_train_knn))
print("KNeighborsClassifier: Accuracy on test Data: {:.3f}".format(y_test_knn))
print("-------------------------------------------------------------------")
print(confusion_matrix(ytest, predict))
print(classification_report(ytest, predict))
acc_score_knn = accuracy_score(ytest,predict)*100
print("Accuracy Of Our Model Is:-",accuracy_score(ytest, predict)*100, "%")

def print_confusion_matrix_knn(y_true, y_pred):
    cm = confusion_matrix(y_true, y_pred)
    print('True positive for KNN = ', cm[0][0])
    print('False positive for KNN = ', cm[0][1])
    print('False negative for KNN = ', cm[1][0])
    print('True negative for KNN = ', cm[1][1])

print_confusion_matrix_knn(ytest, predict)

storeResults('KNN', y_train_knn, y_test_knn , acc_score_knn)

# USING LogisticRegression TO PREDICT MALNOURISHED CHILDREN .

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(predictors, target, test_size = 0.2)

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(xtrain, ytrain)

predict = lr.predict(xtest)
predict

y_train_model5 = lr.predict(xtrain)
y_test_model5 = lr.predict(xtest)

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
y_train_lr = accuracy_score(ytrain,y_train_model5)
y_test_lr = accuracy_score(ytest,y_test_model5)
print("-------------------------------------------------------------------")
print("LogisticRegression: Accuracy on training Data: {:.3f}".format(y_train_lr))
print("LogisticRegression: Accuracy on test Data: {:.3f}".format(y_test_lr))
print("-------------------------------------------------------------------")
print(confusion_matrix(ytest, predict))
print(classification_report(ytest, predict))
acc_score_lr = accuracy_score(ytest,predict)*100
print("Accuracy Of Our Model Is:-",accuracy_score(ytest, predict)*100, "%")

def print_confusion_matrix_lr(y_true, y_pred):
    cm = confusion_matrix(y_true, y_pred)
    print('True positive for LR = ', cm[0][0])
    print('False positive for LR = ', cm[0][1])
    print('False negative for LR = ', cm[1][0])
    print('True negative for LR = ', cm[1][1])

print_confusion_matrix_lr(ytest, predict)

storeResults('LR', y_train_lr, y_test_lr , acc_score_lr )

results = pd.DataFrame({ 'ML Model': ML_Model,    
    'Train Accuracy': acc_train,
    'Test Accuracy': acc_test,
    'Accuracy Score': acc_score })

results

#Sorting the dataframe on accuracy
results = results.sort_values(by=['Accuracy Score','Test Accuracy', 'Train Accuracy'], ascending=False)
results

Outcomes = pd.DataFrame({
    'ML Model' : results['ML Model'],
    'Train Accuracy' : results['Train Accuracy'],
    'Test Accuracy' : results['Test Accuracy'],
    'Accuracy Score' : results['Accuracy Score']
})
Outcomes.to_csv("Results.csv", index = False)

Results = pd.read_csv('Results.csv')
Results.head()

df = pd.DataFrame(Results,columns=['ML Model','Accuracy Score'])
sns.set_style('darkgrid')
sns.barplot(x ='ML Model', y='Accuracy Score', data = df)
plt.show()

df = pd.DataFrame(Results,columns=['ML Model','Accuracy Score'])
df.plot(x ='ML Model', y='Accuracy Score', kind = 'pie')
plt.show()

df = pd.DataFrame(Results,columns=['ML Model','Test Accuracy'])
sns.set_style('darkgrid')
sns.barplot(x ='ML Model', y='Test Accuracy', data = df)
plt.show()

df = pd.DataFrame(Results,columns=['ML Model','Test Accuracy'])
df.plot(x ='ML Model', y='Test Accuracy', kind = 'pie')
plt.show()

